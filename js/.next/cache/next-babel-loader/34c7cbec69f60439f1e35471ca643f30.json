{"ast":null,"code":"var _jsxFileName = \"/Users/markd/projects/js/projector/js/lib/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nlet apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 29\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient(initialState = {}) {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: 'http://localhost:8080/v1/graphql',\n      headers: {\n        'x-hasura-admin-secret': 'myadminsecretkey'\n      },\n      credentials: 'same-origin',\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/markd/projects/js/projector/js/lib/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","headers","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {ApolloClient} from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {HttpLink} from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, {ssr = true} = {}) {\n    const WithApollo = ({apolloClient, apolloState, ...pageProps}) => {\n        const client = apolloClient || initApolloClient(apolloState);\n        return (\n            <ApolloProvider client={client}>\n                <PageComponent {...pageProps} />\n            </ApolloProvider>\n        );\n    };\n\n    // Set the correct displayName in development\n    if (process.env.NODE_ENV !== 'production') {\n        const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n        if (displayName === 'App') {\n            console.warn('This withApollo HOC only works with PageComponents.');\n        }\n\n        WithApollo.displayName = `withApollo(${displayName})`;\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = async (ctx) => {\n            const {AppTree} = ctx;\n\n            // Initialize ApolloClient, add it to the ctx object so\n            // we can use it in `PageComponent.getInitialProp`.\n            const apolloClient = (ctx.apolloClient = initApolloClient());\n\n            // Run wrapped getInitialProps methods\n            let pageProps = {};\n            if (PageComponent.getInitialProps) {\n                pageProps = await PageComponent.getInitialProps(ctx);\n            }\n\n            // Only on the server:\n            if (typeof window === 'undefined') {\n                // When redirecting, the response is finished.\n                // No point in continuing to render\n                if (ctx.res && ctx.res.finished) {\n                    return pageProps;\n                }\n\n                // Only if ssr is enabled\n                if (ssr) {\n                    try {\n                        // Run all GraphQL queries\n                        const {getDataFromTree} = await import('@apollo/react-ssr');\n                        await getDataFromTree(\n                            <AppTree\n                                pageProps={{\n                                    ...pageProps,\n                                    apolloClient\n                                }}\n                            />\n                        );\n                    } catch (error) {\n                        // Prevent Apollo Client GraphQL errors from crashing SSR.\n                        // Handle them in components via the data.error prop:\n                        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                        console.error('Error while running `getDataFromTree`', error);\n                    }\n\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n                }\n            }\n\n            // Extract query data from the Apollo store\n            const apolloState = apolloClient.cache.extract();\n\n            return {\n                ...pageProps,\n                apolloState\n            };\n        };\n    }\n\n    return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (typeof window === 'undefined') {\n        return createApolloClient(initialState);\n    }\n\n    // Reuse client on the client-side\n    if (!apolloClient) {\n        apolloClient = createApolloClient(initialState);\n    }\n\n    return apolloClient;\n}\n\n\nfunction createApolloClient(initialState = {}) {\n    return new ApolloClient({\n        ssrMode: typeof window === 'undefined',\n        link: new HttpLink({\n            uri: 'http://localhost:8080/v1/graphql',\n            headers: {\n                'x-hasura-admin-secret': 'myadminsecretkey'\n             },\n            credentials: 'same-origin',\n            fetch\n        }),\n        cache: new InMemoryCache().restore(initialState)\n    });\n}"]},"metadata":{},"sourceType":"module"}