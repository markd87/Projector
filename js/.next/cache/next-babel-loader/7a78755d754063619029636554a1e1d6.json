{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/markd/projects/js/projector/js/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import useSWR from 'swr'\nimport Head from \"next/head\";\nimport { withApollo } from \"../lib/apollo\";\nimport Layout from \"../components/layout\";\nimport Projects from \"../components/projects\";\nimport Members from \"../components/members\";\nimport Areas from \"../components/areas\";\nimport { Flex } from \"@chakra-ui/core\";\n\nvar Index = function Index(_ref) {\n  var members = _ref.members,\n      projects = _ref.projects,\n      areas = _ref.areas;\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Projector\")), __jsx(Layout, {\n    home: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    padding: \"15px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Projects, {\n    projects: projects,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }), __jsx(Members, {\n    members: members,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }), __jsx(Areas, {\n    areas: areas,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_c = Index;\nexport var __N_SSG = true;\nexport default _c2 = withApollo(Index, {\n  ssr: false\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/markd/projects/js/projector/js/pages/index.js"],"names":["Head","withApollo","Layout","Projects","Members","Areas","Flex","Index","members","projects","areas","ssr"],"mappings":";;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAGA,SAASC,IAAT,QAAqB,iBAArB;;AA2BA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAkC;AAAA,MAA/BC,OAA+B,QAA/BA,OAA+B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC9C,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF,EAIE,MAAC,MAAD;AAAQ,IAAA,IAAI,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAED,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAED,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CAJF,CADF;AAcD,CAfD;;KAAMH,K;;AAiBN,qBAAeN,UAAU,CAACM,KAAD,EAAQ;AAC/BI,EAAAA,GAAG,EAAE;AAD0B,CAAR,CAAzB","sourcesContent":["// import useSWR from 'swr'\nimport Head from \"next/head\";\nimport client from \"../lib/apollo-client\";\nimport { withApollo } from \"../lib/apollo\";\n\nimport Layout from \"../components/layout\";\n\nimport Projects from \"../components/projects\";\nimport Members from \"../components/members\";\nimport Areas from \"../components/areas\";\n\nimport { GET_MEMBERS, GET_PROJECTS, GET_AREAS } from \"../utils/queries\";\nimport { Flex } from \"@chakra-ui/core\";\n\nexport async function getStaticProps() {\n  // Props statically generated by the server\n  // to pre-render page\n\n  const members = await client.query({\n    query: GET_MEMBERS,\n  });\n\n  const projects = await client.query({\n    query: GET_PROJECTS,\n  });\n\n  const areas = await client.query({\n    query: GET_AREAS,\n  });\n\n  return {\n    props: {\n      members: members.data.members,\n      projects: projects.data.projects,\n      areas: areas.data.area,\n    },\n  };\n}\n\nconst Index = ({ members, projects, areas }) => {\n  return (\n    <>\n      <Head>\n        <title>Projector</title>\n      </Head>\n      <Layout home>\n        <Flex padding=\"15px\">\n          <Projects projects={projects} />\n          <Members members={members} />\n          <Areas areas={areas} />\n        </Flex>\n      </Layout>\n    </>\n  );\n};\n\nexport default withApollo(Index, {\n  ssr: false,\n});\n"]},"metadata":{},"sourceType":"module"}