{"ast":null,"code":"var _jsxFileName = \"/Users/markd/projects/js/projector/js/pages/projects/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport NextLink from \"next/link\";\nimport { GET_PROJECTS, ONE_PROJECT_QUERY } from \"../../utils/queries\";\nimport client from \"../../lib/apollo-client\";\nimport Layout from \"../../components/layout\";\nimport { Box, Link, Heading, Text, Badge, List, ListItem, CircularProgress, CircularProgressLabel, Stack } from \"@chakra-ui/core\";\nexport default function Project({\n  projectData\n}) {\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    color: \"orange.500\",\n    fontWeight: \"semibold\",\n    letterSpacing: \"wide\",\n    fontSize: \"xl\",\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, projectData.name), __jsx(CircularProgress, {\n    value: 40,\n    color: \"green\",\n    size: \"3xl\",\n    marginLeft: \"15px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(CircularProgressLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"40%\"))), __jsx(Stack, {\n    isInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, projectData.project_areas.map(area => __jsx(Badge, {\n    key: area.area.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, area.area.name))), __jsx(Heading, {\n    as: \"h2\",\n    size: \"1xl\",\n    marginY: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, projectData.start_date, \" - \", projectData.end_date), __jsx(Heading, {\n    as: \"h2\",\n    size: \"1xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Members\"), __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, projectData.user_projects.map(user => __jsx(ListItem, {\n    key: user.member.id,\n    marginY: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(NextLink, {\n    href: \"/members/[id]\",\n    as: \"/members/\" + user.member.id,\n    passHref: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    color: \"teal.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, user.member.full_name))))), __jsx(Heading, {\n    as: \"h2\",\n    size: \"1xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Description\"), __jsx(Box, {\n    marginY: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, projectData.description)));\n}\nexport async function getStaticPaths() {\n  // Return a list of possible value for id\n  const projectsQuery = await client.query({\n    query: GET_PROJECTS\n  });\n  const paths = projectsQuery.data.projects.map(project => ({\n    params: {\n      id: project.code\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // Fetch necessary data for the blog post using params.id\n  const project = await client.query({\n    query: ONE_PROJECT_QUERY,\n    variables: {\n      id: params.id\n    }\n  });\n  const projectData = project.data.projects[0];\n  return {\n    props: {\n      projectData\n    },\n    revalidate: 60\n  };\n}","map":{"version":3,"sources":["/Users/markd/projects/js/projector/js/pages/projects/[id].js"],"names":["NextLink","GET_PROJECTS","ONE_PROJECT_QUERY","client","Layout","Box","Link","Heading","Text","Badge","List","ListItem","CircularProgress","CircularProgressLabel","Stack","Project","projectData","name","project_areas","map","area","id","start_date","end_date","user_projects","user","member","full_name","description","getStaticPaths","projectsQuery","query","paths","data","projects","project","params","code","fallback","getStaticProps","variables","props","revalidate"],"mappings":"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","sourcesContent":["import NextLink from \"next/link\";\nimport { GET_PROJECTS, ONE_PROJECT_QUERY } from \"../../utils/queries\";\nimport client from \"../../lib/apollo-client\";\nimport Layout from \"../../components/layout\";\nimport {\n  Box,\n  Link,\n  Heading,\n  Text,\n  Badge,\n  List,\n  ListItem,\n  CircularProgress,\n  CircularProgressLabel,\n  Stack,\n} from \"@chakra-ui/core\";\n\nexport default function Project({ projectData }) {\n  return (\n    <Layout>\n      <Stack isInline>\n        <Box\n          color=\"orange.500\"\n          fontWeight=\"semibold\"\n          letterSpacing=\"wide\"\n          fontSize=\"xl\"\n          textTransform=\"uppercase\"\n        >\n          {projectData.name}\n        </Box>\n        <CircularProgress value={40} color=\"green\" size=\"3xl\" marginLeft=\"15px\">\n          <CircularProgressLabel>40%</CircularProgressLabel>\n        </CircularProgress>\n      </Stack>\n      <Stack isInline>\n        {projectData.project_areas.map((area) => (\n          <Badge key={area.area.id}>{area.area.name}</Badge>\n        ))}\n      </Stack>\n\n      <Heading as=\"h2\" size=\"1xl\" marginY=\"2rem\">\n        {projectData.start_date} - {projectData.end_date}\n      </Heading>\n      <Heading as=\"h2\" size=\"1xl\">\n        Members\n      </Heading>\n      <List>\n        {projectData.user_projects.map((user) => (\n          <ListItem key={user.member.id} marginY=\"1rem\">\n            <NextLink\n              href=\"/members/[id]\"\n              as={\"/members/\" + user.member.id}\n              passHref\n            >\n              <Link color=\"teal.500\">{user.member.full_name}</Link>\n            </NextLink>\n          </ListItem>\n        ))}\n      </List>\n      <Heading as=\"h2\" size=\"1xl\">\n        Description\n      </Heading>\n      <Box marginY=\"1rem\">\n        <Text>{projectData.description}</Text>\n      </Box>\n    </Layout>\n  );\n}\n\nexport async function getStaticPaths() {\n  // Return a list of possible value for id\n  const projectsQuery = await client.query({\n    query: GET_PROJECTS,\n  });\n\n  const paths = projectsQuery.data.projects.map((project) => ({\n    params: { id: project.code },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  // Fetch necessary data for the blog post using params.id\n  const project = await client.query({\n    query: ONE_PROJECT_QUERY,\n    variables: { id: params.id },\n  });\n\n  const projectData = project.data.projects[0];\n\n  return {\n    props: {\n      projectData,\n    },\n    revalidate: 60,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}