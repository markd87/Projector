{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/markd/projects/js/projector/js/lib/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    serverRuntimeConfig = _getConfig.serverRuntimeConfig,\n    _ = _getConfig._;\n\nvar apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import('@apollo/react-ssr');\n\n              case 14:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 29\n                  }\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: 'http://localhost:8080/v1/graphql',\n      headers: {\n        'x-hasura-admin-secret': serverRuntimeConfig.hasuraSecret\n      },\n      credentials: 'same-origin',\n      fetch: fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/markd/projects/js/projector/js/lib/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","getConfig","serverRuntimeConfig","_","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","headers","hasuraSecret","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {ApolloClient} from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {HttpLink} from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nimport getConfig from 'next/config'\n\nconst { serverRuntimeConfig, _ } = getConfig()\n\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, {ssr = true} = {}) {\n    const WithApollo = ({apolloClient, apolloState, ...pageProps}) => {\n        const client = apolloClient || initApolloClient(apolloState);\n        return (\n            <ApolloProvider client={client}>\n                <PageComponent {...pageProps} />\n            </ApolloProvider>\n        );\n    };\n\n    // Set the correct displayName in development\n    if (process.env.NODE_ENV !== 'production') {\n        const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n        if (displayName === 'App') {\n            console.warn('This withApollo HOC only works with PageComponents.');\n        }\n\n        WithApollo.displayName = `withApollo(${displayName})`;\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n        WithApollo.getInitialProps = async (ctx) => {\n            const {AppTree} = ctx;\n\n            // Initialize ApolloClient, add it to the ctx object so\n            // we can use it in `PageComponent.getInitialProp`.\n            const apolloClient = (ctx.apolloClient = initApolloClient());\n\n            // Run wrapped getInitialProps methods\n            let pageProps = {};\n            if (PageComponent.getInitialProps) {\n                pageProps = await PageComponent.getInitialProps(ctx);\n            }\n\n            // Only on the server:\n            if (typeof window === 'undefined') {\n                // When redirecting, the response is finished.\n                // No point in continuing to render\n                if (ctx.res && ctx.res.finished) {\n                    return pageProps;\n                }\n\n                // Only if ssr is enabled\n                if (ssr) {\n                    try {\n                        // Run all GraphQL queries\n                        const {getDataFromTree} = await import('@apollo/react-ssr');\n                        await getDataFromTree(\n                            <AppTree\n                                pageProps={{\n                                    ...pageProps,\n                                    apolloClient\n                                }}\n                            />\n                        );\n                    } catch (error) {\n                        // Prevent Apollo Client GraphQL errors from crashing SSR.\n                        // Handle them in components via the data.error prop:\n                        // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                        console.error('Error while running `getDataFromTree`', error);\n                    }\n\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n                }\n            }\n\n            // Extract query data from the Apollo store\n            const apolloState = apolloClient.cache.extract();\n\n            return {\n                ...pageProps,\n                apolloState\n            };\n        };\n    }\n\n    return WithApollo;\n}\n\nfunction initApolloClient(initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (typeof window === 'undefined') {\n        return createApolloClient(initialState);\n    }\n\n    // Reuse client on the client-side\n    if (!apolloClient) {\n        apolloClient = createApolloClient(initialState);\n    }\n\n    return apolloClient;\n}\n\n\nfunction createApolloClient(initialState = {}) {\n    return new ApolloClient({\n        ssrMode: typeof window === 'undefined',\n        link: new HttpLink({\n            uri: 'http://localhost:8080/v1/graphql',\n            headers: {\n                'x-hasura-admin-secret': serverRuntimeConfig.hasuraSecret\n             },\n            credentials: 'same-origin',\n            fetch\n        }),\n        cache: new InMemoryCache().restore(initialState)\n    });\n}"]},"metadata":{},"sourceType":"module"}